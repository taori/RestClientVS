<ResourceDictionary 
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:platformImaging="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Imaging"
    xmlns:imaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
    xmlns:platform="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:shell="clr-namespace:Microsoft.VisualStudio.Shell;assembly=Microsoft.VisualStudio.Shell.15.0"
    xmlns:system="clr-namespace:System;assembly=mscorlib"
    xmlns:utils="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Utilities" 
    >

    <system:Double x:Key="IndentSize">19</system:Double>
    <utils:BrushToColorConverter x:Key="BrushToColorConverter" />

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Width" Value="16"/>
        <Setter Property="Height" Value="16"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border 
                        Width="16" 
                        Height="16"
                        Background="{DynamicResource {x:Static shell:VsBrushes.EnvironmentBackgroundTextureKey}}"
                        SnapsToDevicePixels="True"
                        >

                        <Path 
                            x:Name="ExpandPath"
                            Data="M0,0 L4,4 L0,8 Z"
                            Stroke="{DynamicResource {x:Static platform:TreeViewColors.GlyphBrushKey}}"
                            HorizontalAlignment="Center"
                            VerticalAlignment="Center"
                            SnapsToDevicePixels="True"
                            />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="ExpandPath" Property="Data" Value="M5,0 L0,5 L5,5 Z"/>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource {x:Static platform:TreeViewColors.GlyphBrushKey}}"/>
                        </Trigger>

                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource {x:Static platform:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="ExpandPath" Property="Stroke" Value="{DynamicResource {x:Static platform:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                            <Setter TargetName="ExpandPath" Property="Fill" Value="{DynamicResource {x:Static platform:TreeViewColors.GlyphMouseOverBrushKey}}"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TreeViewCheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxTextBrushKey}}"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBackgroundBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBorderBrushKey}}"/>
        <Setter Property="BorderThickness" Value="1"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Border 
                        x:Name="Border"
                        Margin="1"
                        HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                        VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        Width="16"
                        Height="16"
                        >

                        <Grid VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Path 
                                x:Name="CheckPath" 
                                Opacity="0" 
                                Stretch="None" 
                                Margin="1" 
                                Fill="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphBrushKey}}" 
                                Data="F1 M 9.97498,1.22334L 4.6983,9.09834L 4.52164,9.09834L 0,5.19331L 1.27664,3.52165L 4.255,6.08833L 8.33331,1.52588e-005L 9.97498,1.22334 Z"
                                HorizontalAlignment="Center"
                                VerticalAlignment="Center"
                                />

                            <Rectangle 
                                x:Name="IndeterminatePath"
                                Margin="2"
                                Opacity="0"
                                Fill="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphBrushKey}}"
                                />
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBackgroundHoverBrushKey}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBorderHoverBrushKey}}"/>
                            <Setter TargetName="CheckPath" Property="Fill" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}"/>
                            <Setter TargetName="IndeterminatePath" Property="Fill" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphHoverBrushKey}}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="Border" Property="Background" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBackgroundPressedBrushKey}}"/>
                            <Setter TargetName="Border" Property="BorderBrush" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxBorderPressedBrushKey}}"/>
                            <Setter TargetName="CheckPath" Property="Fill" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}"/>
                            <Setter TargetName="IndeterminatePath" Property="Fill" Value="{DynamicResource {x:Static platform:CommonControlsColors.CheckBoxGlyphPressedBrushKey}}"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckPath" Property="Opacity" Value="1"/>
                            <Setter TargetName="IndeterminatePath" Property="Opacity" Value="0"/>
                        </Trigger>

                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="CheckPath" Property="Opacity" Value="0"/>
                            <Setter TargetName="IndeterminatePath" Property="Opacity" Value="1"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="TreeViewItemTemplate"  TargetType="{x:Type TreeViewItem}">
        <StackPanel Orientation="Vertical">
            <Border Name="Bd"
                Background="{TemplateBinding Background}"
                BorderBrush="{TemplateBinding BorderBrush}"
                BorderThickness="{TemplateBinding BorderThickness}"
                Padding="{TemplateBinding Padding}"
                >

                <Grid Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource IndentConverter}}">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto" MinWidth="{StaticResource IndentSize}"/>
                        <ColumnDefinition Width="*"/>
                    </Grid.ColumnDefinitions>

                    <ToggleButton 
                        x:Name="Expander"
                        Grid.Column="0"
                        Style="{StaticResource ExpandCollapseToggleStyle}"
                        IsChecked="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=IsExpanded}"
                        ClickMode="Press"
                        SnapsToDevicePixels="True"
                        />

                    <Border
                        Grid.Column="1" 
                        SnapsToDevicePixels="True"
                        >

                        <ContentPresenter 
                            x:Name="PART_Header" 
                            ContentSource="Header"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            />
                    </Border>
                </Grid>
            </Border>

            <ItemsPresenter 
                x:Name="ItemsHost" 
                Grid.Column="1"
                Grid.Row="1"
                Grid.ColumnSpan="2"
                />
        </StackPanel>

        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
            </Trigger>

            <Trigger Property="HasItems" Value="False">
                <Setter TargetName="Expander" Property="Visibility" Value="Hidden"/>
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static platform:TreeViewColors.SelectedItemActiveBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:TreeViewColors.SelectedItemActiveTextBrushKey}}"/>
            </Trigger>

            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsSelected" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>

                <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static platform:TreeViewColors.SelectedItemInactiveBrushKey}}"/>
                <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:TreeViewColors.SelectedItemInactiveTextBrushKey}}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="TreeViewItemStyle" TargetType="{x:Type TreeViewItem}">
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:TreeViewColors.BackgroundTextBrushKey}}"/>
        <Setter Property="Template" Value="{StaticResource TreeViewItemTemplate}" />
    </Style>

    <Style x:Key="TreeViewStyle" TargetType="{x:Type TreeView}">
        <Setter Property="Background" Value="{DynamicResource {x:Static platform:TreeViewColors.BackgroundBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:CommonControlsColors.ButtonBorderBrushKey}}"/>
        <Setter Property="ItemContainerStyle" Value="{StaticResource TreeViewItemStyle}"/>
        <Setter Property="platformImaging:ImageThemingUtilities.ImageBackgroundColor" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={StaticResource BrushToColorConverter}}" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
    </Style>


    <Style x:Key="ToolBarButtonBase" TargetType="{x:Type ButtonBase}">
        <Setter Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.EnvironmentBackgroundTextureBrushKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.EnvironmentBackgroundTextureBrushKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="Focusable" Value="False" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ButtonBase}">
                    <Border 
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        SnapsToDevicePixels="True"
                        >

                        <ContentPresenter 
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            />
                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarMouseOverBackgroundGradientBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static shell:VsBrushes.CommandBarBorderKey}}" />
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static shell:VsBrushes.CommandBarBorderKey}}" />
                        </Trigger>

                        <Trigger Property="ToggleButton.IsChecked" Value="True" >
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarSelectedBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarSelectedBorderBrushKey}}" />
                        </Trigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="IsMouseOver" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarHoverOverSelectedIconBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarSelectedBorderBrushKey}}" />
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="ToggleButton.IsChecked" Value="True"/>
                                <Condition Property="IsPressed" Value="True"/>
                            </MultiTrigger.Conditions>

                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarMouseDownBackgroundGradientBrushKey}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarSelectedBorderBrushKey}}" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarButtonStyle" TargetType="Button" BasedOn="{StaticResource ToolBarButtonBase}"/>

    <Style x:Key="ToolBarToggleButtonStyle" TargetType="ToggleButton" BasedOn="{StaticResource ToolBarButtonBase}"/>

    <Style x:Key="ToolBarSeparatorStyle" TargetType="Separator">
        <Setter Property="Margin" Value="3,2" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate>
                    <StackPanel Orientation="Horizontal">
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarToolBarSeparatorBrushKey}}"/>
                        <Rectangle Width="1" Fill="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarToolBarSeparatorHighlightBrushKey}}"/>
                    </StackPanel>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="ToolBarStyle" TargetType="ToolBar" BasedOn="{StaticResource {x:Type ToolBar}}">
        <Style.Resources>
            <Style 
                x:Key="{x:Static ToolBar.ButtonStyleKey}" 
                TargetType="{x:Type Button}" 
                BasedOn="{StaticResource ToolBarButtonStyle}"
                />

            <Style 
                x:Key="{x:Static ToolBar.ToggleButtonStyleKey}" 
                TargetType="{x:Type ToggleButton}" 
                BasedOn="{StaticResource ToolBarToggleButtonStyle}"
                />

            <Style 
                x:Key="{x:Static ToolBar.SeparatorStyleKey}" 
                TargetType="{x:Type Separator}" 
                BasedOn="{StaticResource ToolBarSeparatorStyle}"
                />

            <Style TargetType="imaging:CrispImage" BasedOn="{StaticResource {x:Type imaging:CrispImage}}">
                <Setter Property="Width" Value="16" />
                <Setter Property="Height" Value="16" />
                <Setter Property="Margin" Value="2" />
            </Style>
        </Style.Resources>

        <Setter Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.CommandBarGradientBrushKey}}"/>
        <Setter Property="Padding" Value="4,2" />
        <Setter Property="MinHeight" Value="24" />
        <Setter Property="ToolBar.OverflowMode" Value="Never" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="Continue"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToolBar}">
                    <Grid x:Name="Grid" SnapsToDevicePixels="True">
                        <Border 
                            x:Name="MainPanelBorder"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}"
                            >

                            <ToolBarPanel 
                                x:Name="PART_ToolBarPanel"
                                IsItemsHost="True"
                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                />
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="Label" x:Key="LabelGoodState">
        <Setter Property="Foreground" Value="Green"></Setter>
    </Style>
    <Style TargetType="TabControl">
        <Setter Property="BorderThickness" Value="0"></Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TabControl}">
                    <Grid x:Name="templateRoot" ClipToBounds="true" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition x:Name="ColumnDefinition0"/>
                            <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                            <RowDefinition x:Name="RowDefinition1" Height="*"/>
                        </Grid.RowDefinitions>
                        <TabPanel x:Name="headerPanel" Background="Transparent" Grid.Column="0" IsItemsHost="true" Grid.Row="0" KeyboardNavigation.TabIndex="1" Panel.ZIndex="1"/>
                        <Border x:Name="contentPanel" 
                                Background="{TemplateBinding Background}" 
                                BorderBrush="{TemplateBinding BorderBrush}" 
                                BorderThickness="{TemplateBinding BorderThickness}" 
                                Grid.Column="0" 
                                Grid.Row="1" 
                                KeyboardNavigation.DirectionalNavigation="Contained" 
                                KeyboardNavigation.TabIndex="2" 
                                KeyboardNavigation.TabNavigation="Local">
                            <ContentPresenter x:Name="PART_SelectedContentHost" 
                                              ContentSource="SelectedContent" 
                                              Margin="{TemplateBinding Padding}" 
                                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="TabStripPlacement" Value="Bottom">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="Auto"/>
                            <!-- <Setter Property="Margin" TargetName="headerPanel" Value="2,0,2,2"/> -->
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Left">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="1"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="Auto"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <!--<Setter Property="Margin" TargetName="headerPanel" Value="2,2,0,2"/>-->
                            <!-- <Setter Property="Margin" TargetName="headerPanel" Value="0"/> -->
                        </Trigger>
                        <Trigger Property="TabStripPlacement" Value="Right">
                            <Setter Property="Grid.Row" TargetName="headerPanel" Value="0"/>
                            <Setter Property="Grid.Row" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Grid.Column" TargetName="headerPanel" Value="1"/>
                            <Setter Property="Grid.Column" TargetName="contentPanel" Value="0"/>
                            <Setter Property="Width" TargetName="ColumnDefinition0" Value="*"/>
                            <Setter Property="Width" TargetName="ColumnDefinition1" Value="Auto"/>
                            <Setter Property="Height" TargetName="RowDefinition0" Value="*"/>
                            <Setter Property="Height" TargetName="RowDefinition1" Value="0"/>
                            <!-- <Setter Property="Margin" TargetName="headerPanel" Value="0,2,2,2"/> -->
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="TextElement.Foreground" TargetName="templateRoot" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="TabItem">
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:CommonControlsColors.InnerTabInactiveBorderBrushKey}}" />
        <Setter Property="Background" Value="{DynamicResource {x:Static platform:CommonControlsColors.InnerTabInactiveBackgroundBrushKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:CommonControlsColors.InnerTabInactiveTextBrushKey}}" />
        <Setter Property="Padding" Value="0"></Setter>
        <Setter Property="HeaderTemplate">
            <Setter.Value>
                <DataTemplate>
                    <Border x:Name="container" Background="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=Background}" Padding="4">
                        <ContentPresenter Content="{TemplateBinding Content}"></ContentPresenter>
                    </Border>

                    <!-- <DataTemplate.Triggers> -->
                    <!--     <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor,AncestorType={x:Type TabItem}},Path=IsSelected}" Value="True"> -->
                    <!--         <Setter TargetName="container" Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabGradientBrushKey}}"/> -->
                    <!--     </DataTrigger> -->
                    <!-- </DataTemplate.Triggers> -->
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabMouseOverBorderBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabMouseOverBackgroundGradientBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabMouseOverTextBrushKey}}" />
            </Trigger>

            <Trigger Property="IsSelected" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabSelectedBorderBrushKey}}" />
                <Setter Property="Background" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabSelectedTabBrushKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static platform:EnvironmentColors.ToolWindowTabSelectedTextBrushKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>